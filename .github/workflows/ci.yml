name: Proprietary CI Pipeline

# PROPRIETARY SOFTWARE - RESTRICTED ACCESS
# Only authorized maintainers can trigger this workflow

on:
  push:
    branches: [ main ]
  # Pull requests disabled for proprietary software
  workflow_dispatch:  # Manual trigger only

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        # Create basic test environment
        export GEMINI_API_KEY="test-key"
        export SECRET_KEY="test-secret"
        export JWT_SECRET_KEY="test-jwt-secret"
        python -c "from app import init_db; init_db()"
        # Run basic import tests
        python -c "import app; print('App imports successfully')"
        python -c "import config; print('Config imports successfully')"
  
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run security checks with bandit
      run: |
        bandit -r . -x tests/ -f json -o bandit-report.json || true
    
    - name: Check for known vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  docker:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -f scripts/deployment/Dockerfile -t medikalai:latest .
    
    - name: Test Docker image
      run: |
        # Test that the image builds and runs
        docker run --rm -d --name test-container \
          -e GEMINI_API_KEY="test-key" \
          -e SECRET_KEY="test-secret" \
          -e JWT_SECRET_KEY="test-jwt-secret" \
          -p 8080:8080 medikalai:latest
        sleep 10
        docker logs test-container
        docker stop test-container 